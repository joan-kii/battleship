{"version":3,"sources":["modules/GridPlayer.js","modules/GridComputer.js","factories/playerFactory.js","modules/InfoZone.js","modules/Game.js","modules/PlayerZone.js","modules/Footer.js","factories/shipFactory.js","factories/gameboardFactory.js","App.js","index.js"],"names":["GridPlayer","playerCells","playerGridTitle","startGame","className","GridComputer","computerCells","gridComputerClass","playerFactory","isComputer","spotsShooted","name","shoot","playerTarget","availableSpot","computerTarget","max","Math","round","random","includes","push","InfoZone","playerTurn","winner","messageWinner","playerMessages","computerMessages","message","floor","length","onClick","window","location","reload","player","computer","Game","playerGameboard","computerGameboard","clickableComputerCells","map","cell","React","cloneElement","playerTurnRef","current","isGameOverRef","parseInt","key","receiveAttack","props","missCell","computerBoard","splice","setComputerBoard","boomCell","checkWinner","setPlayerTurn","handleClick","useEffect","setPlayerBoard","useState","isGameOver","setIsGameOver","useRef","setWinner","computerLoose","checkSunkenShips","playerLoose","playerBoard","timer","setTimeout","updatePlayerGrid","clearTimeout","PlayerZone","renderPlayerFleet","shipAlreadyPlaced","setStartGame","rotateMessage","readyMessage","Footer","href","target","rel","shipFactory","test","shipName","positionsHited","shipLength","shipPosition","hit","number","isSunk","Error","gameboardFactory","shipsArray","missedShots","placeShip","ship","coords","isRotated","i","shotPlace","isHited","sunkenShips","computerTakenSpots","deployNavy","navy","takenSpots","randomDirection","shipSpots","direction","randomStart","abs","isTaken","some","index","sliceShipSpotsRight","slice","sliceShipSpotsLeft","isAtRightEdge","isAtLeftEdge","isAtBottomEdge","forEach","computerFleet","computerShipsPositions","positions","id","createComputerGrid","selectedShip","selectedShipElement","draggedShip","draggedShipLength","playerFleet","shipDivs","renderShipDivs","lastIdDiv","isHorizontal","draggable","onDoubleClick","e","container","rotateShip","parentNode","onMouseDown","handleMouseDown","onDragStart","dragStart","onDragEnd","dragEnd","substr","children","dragPrevent","stopPropagation","preventDefault","remove","App","cells","onDragOver","onDrop","dragDrop","createGrid","setPlayerCells","newCells","lastShipId","shipPlaces","arePlacesTaken","place","lastShipIdPlacement","notAllowedSpots","newCell","setShipsAreadyPlaced","shipsAlreadyPlaced","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d6bedb2.chunk.js","sourcesContent":["import React from 'react';\n\nconst GridPlayer = ({ playerCells, startGame }) => {\n\n  const playerGridTitle = startGame ? 'Tu Flota': 'Posiciona tus Barcos';\n  return (\n    <div className='playerPlace'>\n      <h2 className='placeName'>{playerGridTitle}</h2>\n      <div className='grid' >\n        {playerCells}\n      </div>\n    </div>\n  )\n};\n\nexport default GridPlayer;","import React from 'react';\n\nconst GridComputer = ({ computerCells, startGame }) => {\n  const gridComputerClass = startGame ? 'grid grid-computer' : 'grid-computer-none';\n  \n  return (\n    <div className='computerPlace'>\n      {startGame && <h2 className='placeName'>Flota Enemiga</h2>}\n      <div className={gridComputerClass}>\n        { computerCells }\n      </div>\n    </div>\n  )\n};\n\nexport default GridComputer;","const playerFactory = (isComputer) => {\n  const name = isComputer ? 'Ordenador' : 'Jugador 1';\n  const spotsShooted = [];\n\n  const getRandomNumber = (max) => {\n    return Math.round(Math.random() * (max));\n  };\n  \n  const shoot = (playerTarget) => {\n    if(isComputer) {\n      let availableSpot = true;\n      while(availableSpot) {\n        let computerTarget = getRandomNumber(100);\n        if(!spotsShooted.includes(computerTarget)) {\n          spotsShooted.push(computerTarget);\n          availableSpot = false;\n        }\n      } \n\n    } else {\n      if(!spotsShooted.includes(playerTarget)) {\n        spotsShooted.push(playerTarget);\n      } else {\n        return 'choose again';\n      }\n    }\n    return spotsShooted;\n  };\n  return { name, shoot, spotsShooted }\n};\n\nexport default playerFactory;\n","import React from 'react';\n\nconst InfoZone = ({ playerTurn, winner }) => {\n\n  const messageWinner = winner === 'Ordenador' ? \n    'Has sido derrotado...' : '¡¡¡Victoria!!!';\n\n  const playerMessages = ['¡Vamos!', '¡Al ataque!', '¡Sí!', '¡Dispara!', 'Tu turno', '¡A por ellos!'];\n  const computerMessages = ['¡Atención!', '¡Te atacan!', '¡Cuidado!', '¡Oh, no!', '¡Resiste!', '¡No te rindas!'];\n\n  const message = playerTurn ? playerMessages[Math.floor(Math.random() * playerMessages.length)] : \n    computerMessages[Math.floor(Math.random() * computerMessages.length)];\n\n  return (\n    <div className='grid-infoZone'> \n      {winner && \n        <div className='winner'>\n          <h3 className='turnDisplay'>{messageWinner}</h3>\n          <button className='replayButton'\n            onClick={() => window.location.reload()}>Volver a jugar</button>\n        </div>}\n      {!winner && <p className='messages'>{message}</p>}\n    </div>\n  )\n};\n\nexport default InfoZone;","import React, { useState, useEffect, useRef } from 'react';\nimport GridPlayer from './GridPlayer';\nimport GridComputer from './GridComputer';\nimport playerFactory from '../factories/playerFactory';\nimport InfoZone from './InfoZone';\n\nconst player = playerFactory(false);\nconst computer = playerFactory(true);\n\nconst Game = ({ playerCells, computerCells, playerGameboard, computerGameboard, startGame }) => {\n\n  // Toggle Cells Classes\n\n  const handleClick = (cell) => {\n\n    if (playerTurnRef.current && !isGameOverRef.current) {\n      player.shoot(parseInt(cell.key));\n      computerGameboard.receiveAttack(parseInt(cell.key));\n      if (cell.props.className === 'spot') {\n        let missCell = React.cloneElement(cell, {className: 'miss'}, null);\n        computerBoard.splice(parseInt(cell.key), 1, missCell);\n        setComputerBoard([...computerBoard]);\n      }  else {\n        let boomCell = React.cloneElement(cell, {className: 'boom'}, null);\n        computerBoard.splice(parseInt(cell.key), 1, boomCell);\n        setComputerBoard([...computerBoard]);\n      }\n      checkWinner();\n      setPlayerTurn(false);\n    }\n  };\n\n  const updatePlayerGrid = (cell) => {\n\n    playerGameboard.receiveAttack(cell);\n    if (playerBoard[cell].props.className === 'spot') {\n      let missCell = React.cloneElement(playerBoard[cell], {className: 'miss'}, null);\n      playerBoard.splice(playerBoard[cell].key, 1, missCell);\n      setPlayerBoard([...playerBoard]);\n    } else {\n      let boomCell = React.cloneElement(playerBoard[cell], {className: 'boom'}, null);\n      playerBoard.splice(playerBoard[cell].key, 1, boomCell);\n      setPlayerBoard([...playerBoard]);\n    }\n    checkWinner();\n    setPlayerTurn(true);\n  };\n  \n  const clickableComputerCells = computerCells.map(cell => {\n    return React.cloneElement(cell, {onClick: () => handleClick(cell)}, null);\n  });\n\n  // Game Loop\n  \n  useEffect(() => setPlayerBoard(playerCells), [playerCells]);\n\n  const [isGameOver, setIsGameOver] = useState(false);\n  const isGameOverRef = useRef();\n  isGameOverRef.current = isGameOver;\n\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const playerTurnRef = useRef();\n  playerTurnRef.current = playerTurn;\n\n  const [winner, setWinner] = useState('');\n\n  const checkWinner = () => {\n    const computerLoose = computerGameboard.checkSunkenShips();\n    const playerLoose = playerGameboard.checkSunkenShips();\n    if (computerLoose || playerLoose) setIsGameOver(true);\n    if (computerLoose) setWinner(player.name);\n    if (playerLoose) setWinner(computer.name);\n  };\n\n  const [playerBoard, setPlayerBoard] = useState(playerCells);\n  const [computerBoard, setComputerBoard] = useState(clickableComputerCells);\n\n  useEffect(() => {\n    if (!playerTurn && !isGameOver) {\n      computer.shoot();\n      const timer = setTimeout(() => {\n        updatePlayerGrid(computer.spotsShooted[computer.spotsShooted.length - 1]);\n      }, 600);\n      return () => clearTimeout(timer);\n    }\n  });\n\n  // Render\n\n  return (\n    <div className='game'>\n      <h2 className='gameTitle'>Hundir la Flota</h2>\n      <div className='playground'>\n        <GridPlayer \n          playerCells={playerBoard}\n          startGame={startGame} />\n        <GridComputer \n          computerCells={computerBoard}\n          startGame={startGame} />\n      </div>\n      {startGame && \n        <InfoZone \n          playerTurn={playerTurn}\n          winner={winner} />}\n    </div>\n  );\n};\n\nexport default Game;","import React from 'react';\n\nconst PlayerZone = ({ renderPlayerFleet, shipAlreadyPlaced, setStartGame }) => {\n  const rotateMessage = <h3 className='rotateMessage'>Haz doble click para girar el barco</h3>;\n  const readyMessage = \n    <div className='readyMessage'>\n      <h3>¡A Jugar!</h3>\n      <button \n        className='button startGame'\n        onClick={() => setStartGame(true)}>Comenzar</button>\n    </div>;\n\n  return (\n    <div className='grid-playerZone'>\n      { shipAlreadyPlaced ? readyMessage : rotateMessage } \n      <div className='fleet'>\n        { renderPlayerFleet } \n      </div>\n    </div>\n  )\n};\n\nexport default PlayerZone;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div className='footer'>\n      <a href='https://www.theodinproject.com' \n         target='_blank' \n         rel='noreferrer'>The Odin Project</a>\n      <a href='https://github.com/joan-kii/battleship' \n         target='_blank' \n         rel='noreferrer'>Joankii's Repo</a>\n    </div>\n  )\n};\n\nexport default Footer;","const shipFactory = (name) => {\n  \n  const regex = /Destructor|Crucero|Submarino|Acorazado|Portaviones/;\n  if (regex.test(name)) {\n    const shipName = name;\n    const shipPosition = [];\n    const positionsHited = [];\n   \n    let shipLength = 0;\n    switch (shipName) {\n      case 'Destructor':\n        shipLength = 2;\n        break;\n      case 'Crucero':\n      case 'Submarino':\n        shipLength = 3;\n        break;\n      case 'Acorazado':\n        shipLength = 4;\n        break;\n      case 'Portaviones':\n        shipLength = 5;\n        break;\n      default:\n        shipLength = 2;\n        break;\n    }\n\n    const hit = (number) => {\n      positionsHited.push(number);\n    };\n    const isSunk = () => {\n      return shipLength === positionsHited.length;\n    };\n    \n    return { shipName, shipLength, shipPosition, hit, isSunk };\n  }\n  throw new Error('pass a string with one of the ship names with the first letter capitalized: Destructor, Crucero, Submarino, Acorazado or Portaviones');\n};\n\nexport default shipFactory;","import shipFactory from './shipFactory';\n\nconst gameboardFactory = () => {\n\n  const destroyer = shipFactory('Destructor');\n  const cruiser = shipFactory('Crucero');\n  const submarine = shipFactory('Submarino');\n  const battleship = shipFactory('Acorazado');\n  const carrier = shipFactory('Portaviones');\n\n  const shipsArray = [destroyer, cruiser, submarine, battleship, carrier];\n  const missedShots = [];\n  \n  const placeShip = (ship, coords, isRotated) => {\n    for(let i = 0; i < ship.shipLength; i++) {\n      if (isRotated) {\n        ship.shipPosition.push(coords + i);\n      } else {\n        ship.shipPosition.push(coords + (i * 10));\n      }\n    }\n    return ship.shipPosition;\n  };\n\n  const receiveAttack = (shotPlace) => {\n    let isHited = false;\n    for(let ship of shipsArray) {\n      if(ship.shipPosition.includes(shotPlace)) {\n        isHited = true;\n        ship.hit(shotPlace);\n      }\n    }\n    if (!isHited) missedShots.push(shotPlace);\n    return missedShots;\n  };\n\n  const checkSunkenShips = () => {\n    const sunkenShips = [];\n    for(let ship of shipsArray) {\n      if(ship.isSunk()) sunkenShips.push(ship);\n    }\n    return sunkenShips.length === shipsArray.length;\n  };\n\n  return { shipsArray, missedShots, placeShip, receiveAttack, checkSunkenShips };\n};\n\nexport default gameboardFactory;","import React, { useState } from 'react';\nimport Game from './modules/Game';\nimport PlayerZone from './modules/PlayerZone';\nimport Footer from './modules/Footer';\nimport gameboardFactory from './factories/gameboardFactory';\n\nconst playerGameboard = gameboardFactory();\nconst computerGameboard = gameboardFactory();\n\n// Place Computer Fleet\n\nconst computerTakenSpots = [];\n\nconst deployNavy = (navy, ship, takenSpots) => {\n  let randomDirection = Math.random() < 0.5;\n  let shipSpots = [];\n  let direction = randomDirection ? 10 : 1;\n  let randomStart = Math.abs(Math.floor(Math.random() * (100 - (direction * ship.shipLength))));\n\n  for (let i = 0; i < ship.shipLength; i++) {\n    if(!randomDirection) {\n      shipSpots.push(randomStart + (i * 10));\n    } else {\n      shipSpots.push(randomStart + i);\n    }\n  }\n\n  const isTaken = shipSpots.some(index => takenSpots.includes(index));\n  const sliceShipSpotsRight = shipSpots.slice(0, ship.shipLength - 1);\n  const sliceShipSpotsLeft = shipSpots.slice(1, ship.shipLength);\n  const isAtRightEdge = sliceShipSpotsRight.some(index => index % 10 === 9);\n  const isAtLeftEdge = sliceShipSpotsLeft.some(index => index % 10 === 0);\n  const isAtBottomEdge = shipSpots.some(index => index > 99);\n  \n  if (!isTaken && !isAtRightEdge && !isAtLeftEdge && !isAtBottomEdge) {\n    shipSpots.forEach(index => takenSpots.push(index));\n    return navy.placeShip(ship, shipSpots[0], randomDirection);\n  } else {\n    deployNavy(navy, ship, takenSpots); \n  }\n};\n\nfor (let ship of computerGameboard.shipsArray) {\n  deployNavy(computerGameboard, ship, computerTakenSpots);\n}\n\n// Create Computer Grid \n\nconst computerCells = [];\nconst createComputerGrid = (computerShipsPositions) => {\n\n  for(let i = 0; i < 100; i++) {\n    computerCells.push(<div key={i} id={i} className='spot'></div>);\n  }\n\n  for (let ship of computerShipsPositions) {\n    for (let cell of ship.positions) {\n      computerCells[cell] = <div key={cell} id={cell} className={ship.ship}></div>;\n    }\n  }\n  return computerCells;\n};\n\nconst computerFleet = computerGameboard.shipsArray;\nconst computerShipsPositions = [];\n\nfor (let ship of computerFleet) {\n  computerShipsPositions.push({\n    ship: ship.shipName, \n    positions: ship.shipPosition\n  });\n}\n\ncreateComputerGrid(computerShipsPositions);\n\n// Place Player Zone Fleet\n\nconst playerFleet = playerGameboard.shipsArray;\n\nconst shipDivs = (ship) => {\n  const renderShipDivs = [];\n  for(let i = 0; i < ship.shipLength; i++) {\n    renderShipDivs.push(<div key={i} id={`${ship.shipName}-${i}`}></div>);\n    ship.lastIdDiv = i;\n  }\n  return renderShipDivs;\n};\n\nconst rotateShip = (container, ship) => {\n  if (ship.isHorizontal) {\n    container.className = `ship ${ship.shipName}-container-vertical`;\n  } else {\n    container.className = `ship ${ship.shipName}-container`;\n  }\n  ship.isHorizontal = !ship.isHorizontal;\n};\n\nconst renderPlayerFleet = playerFleet.map((ship, index) => {\n  ship.isHorizontal = true;\n  ship.lastIdDiv = 0;\n  return <div \n    key={index}\n    id={ship.shipName}\n    className={`ship ${ship.shipName}-container`} \n    draggable='true'\n    onDoubleClick={(e) => rotateShip(e.target.parentNode, ship)}\n    onMouseDown={(e) => handleMouseDown(e)}\n    onDragStart={(e) => dragStart(e, ship)}\n    onDragEnd={(e) => dragEnd(e)}>\n    {shipDivs(ship)}\n  </div>\n});\n\n// Drag and Drop Player Fleet\n\nlet selectedShip;\nlet selectedShipElement;\nlet draggedShip;\nlet draggedShipLength;\n\nconst handleMouseDown = (e) => {\n  selectedShipElement = e.target.id;\n  selectedShipElement = parseInt(selectedShipElement.substr(-1));\n};\n\nconst dragStart = (e, ship) => {\n  selectedShip = ship;\n  draggedShip = e.target;\n  draggedShipLength = draggedShip.children.length;\n};\n\nconst dragPrevent = (e) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst dragEnd = (e) => {\n  if (selectedShip.shipPosition.length !== 0) e.target.remove();\n};\n\n// Render\n\nconst App = () => {\n\n  // Create Player Grid\n\n  let takenSpots = [];\n\n  const createGrid = () => {\n    let cell;\n    let cells = [];\n    for(let i = 0; i < 100; i++) {\n      cell = <div \n      key={i}\n      id={i}\n      className={'spot'}\n      onDragOver={(e) => dragPrevent(e)}\n      onDrop={(e) => dragDrop(e)} ></div>\n      cells.push(cell);\n    }\n    return cells;\n  };\n\n  const [playerCells, setPlayerCells] = useState(createGrid());\n  let newCells = [...playerCells];\n  \n  const dragDrop = (e) => {\n    e.preventDefault();\n    const notAllowedHorizontal = [\n      0, 10, 20, 30, 40, 50, 60, 70, 80, 90, \n      1, 11, 21, 31, 41, 51, 61, 71, 81, 91, \n      2, 12, 22, 32, 42, 52, 62, 72, 82, 92,\n      3, 13, 23, 33, 43, 53, 63, 73, 83, 93\n      ];        \n    const notAllowedVertical = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n      10, 11, 12, 13, 14, 14, 16, 17, 18, 19, \n      20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n      30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n      40, 41, 42, 43, 44, 45, 46, 47, 48, 49\n      ];\n    let lastShipId = selectedShip.shipLength - 1;\n    \n    if (selectedShip.isHorizontal) {\n      let shipPlaces = [];\n      for (let i = 0; i < draggedShipLength; i++) {\n        shipPlaces.push((parseInt(e.target.id) - selectedShipElement) + i);\n      }\n      let arePlacesTaken = shipPlaces.some(place => takenSpots.includes(place));\n      let lastShipIdPlacement = (parseInt(e.target.id) - selectedShipElement) + (selectedShip.shipLength - 1);\n      let notAllowedSpots = notAllowedHorizontal.splice(0, 10 * lastShipId);\n      let checkAllowedPlace = lastShipIdPlacement > 99 || notAllowedSpots.includes(lastShipIdPlacement) || arePlacesTaken;\n      if (!checkAllowedPlace) {\n        for (let i = 0; i < draggedShipLength; i++) {\n          let index = parseInt(e.target.id) - selectedShipElement + i;\n          let newCell = React.cloneElement(playerCells[index], {className: 'taken'}, null);\n          newCells.splice(index, 1, newCell);\n          takenSpots.push(index);\n          selectedShip.shipPosition.push(index);\n        }\n      }\n  \n    } else if (!selectedShip.isHorizontal) {\n      let shipPlaces = [];\n      for (let i = 0; i < draggedShipLength; i++) {\n        shipPlaces.push((parseInt(e.target.id) - (selectedShipElement * 10)) + (i * 10));\n      }\n      let arePlacesTaken = shipPlaces.some(place => takenSpots.includes(place));\n      let lastShipIdPlacement = parseInt(e.target.id) - ((selectedShipElement - (selectedShip.shipLength - 1)) * 10);\n      let notAllowedSpots = notAllowedVertical.splice(0, 10 * lastShipId);\n      let checkAllowedPlace = lastShipIdPlacement > 99 || notAllowedSpots.includes(lastShipIdPlacement) || arePlacesTaken;\n      if (!checkAllowedPlace) {\n        for (let i = 0; i < draggedShipLength; i++) {\n          let index = parseInt(e.target.id) - (selectedShipElement * 10) + (i * 10);\n          let newCell = React.cloneElement(playerCells[index], {className: 'taken'}, null);\n          newCells.splice(index, 1, newCell);\n          takenSpots.push(index);\n          selectedShip.shipPosition.push(index);\n        }\n      }\n    } else return;\n\n    if (takenSpots.length === 17) setShipsAreadyPlaced(true);\n    setPlayerCells([...newCells]);\n  };\n\n  // Start Game \n\n  const [shipsAlreadyPlaced, setShipsAreadyPlaced] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n\n  // Game Loop\n\n  return (\n    <main className=\"App\">\n      <Game \n        playerCells={playerCells}\n        computerCells={computerCells}\n        playerGameboard={playerGameboard}\n        computerGameboard={computerGameboard}\n        startGame={startGame} />\n      <div className='info-container'>\n        {!startGame && <PlayerZone \n          renderPlayerFleet={renderPlayerFleet}\n          shipAlreadyPlaced={shipsAlreadyPlaced}\n          setStartGame={setStartGame} />}\n      </div>\n      <footer>\n        <Footer />\n      </footer>\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}